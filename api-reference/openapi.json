{
  "openapi": "3.1.0",
  "info": {
    "title": "Accounting+ API",
    "description": "A comprehensive accounting API that provides endpoints for managing bank cash flow vouchers and journal transactions",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://staging-openapi.accountingplus.id",
      "description": "Main API Server",
      "variables": {
        "url": {
          "default": "https://staging-openapi.accountingplus.id",
          "description": "The API base URL"
        }
      }
    }
  ],
  "security": [
    {
      "bearerAuth": [],
      "signatureKey": [],
      "dataKey": []
    }
  ],
  "tags": [
    {
      "name": "Vouchers",
      "description": "Bank cash flow voucher management"
    },
    {
      "name": "Journals",
      "description": "Journal transaction management"
    },
    {
      "name": "Purchase Invoices",
      "description": "Purchase invoice management"
    }
  ],
  "paths": {
    "/oauth/clients/accesstoken": {
      "post": {
        "tags": [
          "OAuth"
        ],
        "summary": "Get Access Token",
        "description": "Get an access token for the client",
        "requestBody": {
          "description": "Client credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "client_id",
                  "client_secret"
                ],
                "properties": {
                  "client_id": {
                    "type": "string"
                  },
                  "client_secret": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Access token generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organization_name": {
                      "type": "string",
                      "example": "PT. Test"
                    },
                    "client_id": {
                      "type": "string",
                      "example": "thepartner"
                    },
                    "access_token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "expires_in": {
                      "type": "integer",
                      "example": 3600
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ACC07"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid client credentials"
                    },
                    "traceId": {
                      "type": "string",
                      "example": "123e4567-e89b-12d3-a456-426614174000"
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/v1/vouchers": {
      "get": {
        "tags": [
          "Vouchers"
        ],
        "summary": "List Vouchers",
        "description": "Retrieve a list of bank cash flow vouchers with filtering options",
        "parameters": [
          {
            "name": "bank_account_code",
            "in": "query",
            "description": "Bank account code filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "month",
            "in": "query",
            "description": "Month filter (01-12)",
            "schema": {
              "type": "string",
              "pattern": "^(0[1-9]|1[0-2])$"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "Year filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "document_status",
            "in": "query",
            "description": "Document status filter",
            "schema": {
              "type": "string",
              "enum": [
                "D",
                "F",
                "C"
              ],
              "description": "D = Draft, F = Final, C = Canceled"
            }
          },
          {
            "name": "bank_account_name_from",
            "in": "query",
            "description": "Source bank account name filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bank_account_name_to",
            "in": "query",
            "description": "Destination bank account name filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "remark",
            "in": "query",
            "description": "Remark filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "document_number",
            "in": "query",
            "description": "Document number filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of vouchers retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoucherListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Vouchers"
        ],
        "summary": "Create Voucher",
        "description": "Create a new bank cash flow voucher",
        "requestBody": {
          "description": "Voucher details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVoucherRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Voucher created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoucherResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vouchers/categories": {
      "get": {
        "tags": [
          "Vouchers"
        ],
        "summary": "List Categories",
        "description": "Retrieve voucher categories",
        "parameters": [
          {
            "name": "document_type",
            "in": "query",
            "description": "Document type filter",
            "schema": {
              "type": "string",
              "enum": [
                "T",
                "S",
                "R"
              ],
              "description": "T = Transfer Dana, S = Kirim Dana, R = Terima Dana"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Categories retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoriesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vouchers/{document_number}": {
      "get": {
        "tags": [
          "Vouchers"
        ],
        "summary": "Get Voucher by ID",
        "description": "Retrieve a specific voucher by document number",
        "parameters": [
          {
            "name": "document_number",
            "in": "path",
            "required": true,
            "description": "Document number (URL encoded)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Voucher retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoucherDetailResponse"
                }
              }
            }
          },
          "404": {
            "description": "Voucher not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Vouchers"
        ],
        "summary": "Update Voucher",
        "description": "Update an existing voucher",
        "parameters": [
          {
            "name": "document_number",
            "in": "path",
            "required": true,
            "description": "Document number (URL encoded)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated voucher details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVoucherRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Voucher updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoucherDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Voucher not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/journals": {
      "get": {
        "tags": [
          "Journals"
        ],
        "summary": "List Journals",
        "description": "Retrieve a list of journal transactions with filtering options",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date filter (ISO 8601 format)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date filter (ISO 8601 format)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "accounts",
            "in": "query",
            "description": "Comma-separated list of account types",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "document_number",
            "in": "query",
            "description": "Document number filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Account number filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "remark",
            "in": "query",
            "description": "Remark filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Journals retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JournalListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Journals"
        ],
        "summary": "Create Journal",
        "description": "Create a new journal transaction",
        "requestBody": {
          "description": "Journal transaction details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateJournalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Journal created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JournalDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/journals/{document_number}": {
      "get": {
        "tags": [
          "Journals"
        ],
        "summary": "Get Journal by ID",
        "description": "Retrieve a specific journal transaction by document number",
        "parameters": [
          {
            "name": "document_number",
            "in": "path",
            "required": true,
            "description": "Document number (URL encoded)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Journal retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JournalDetailResponse"
                }
              }
            }
          },
          "404": {
            "description": "Journal not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Journals"
        ],
        "summary": "Cancel Journal",
        "description": "Cancel a journal transaction",
        "parameters": [
          {
            "name": "document_number",
            "in": "path",
            "required": true,
            "description": "Document number (URL encoded)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Journal cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JournalDetailResponse"
                }
              }
            }
          },
          "404": {
            "description": "Journal not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/purchase-invoices": {
      "get": {
        "tags": [
          "Purchase Invoices"
        ],
        "summary": "List Purchase Invoices",
        "description": "Retrieve a list of purchase invoices with filtering options",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "document_status",
            "in": "query",
            "description": "Document status filter",
            "schema": {
              "type": "string",
              "enum": [
                "D",
                "F",
                "M",
                "C"
              ]
            }
          },
          {
            "name": "month",
            "in": "query",
            "description": "Month filter",
            "schema": {
              "type": "string",
              "example": "09"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "Year filter",
            "schema": {
              "type": "string",
              "example": "2025"
            }
          },
          {
            "name": "tax_code",
            "in": "query",
            "description": "Tax code filter",
            "schema": {
              "type": "string",
              "example": "005"
            }
          },
          {
            "name": "vendor_code",
            "in": "query",
            "description": "Vendor code filter",
            "schema": {
              "type": "string",
              "example": "00001"
            }
          },
          {
            "name": "list_of_outstanding",
            "in": "query",
            "description": "List of outstanding filter",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "process_status",
            "in": "query",
            "description": "Process status filter",
            "schema": {
              "type": "string",
              "example": "UP"
            }
          },
          {
            "name": "vendor_name",
            "in": "query",
            "description": "Vendor name filter",
            "schema": {
              "type": "string",
              "example": "PT. Test"
            }
          },
          {
            "name": "document_number",
            "in": "query",
            "description": "Document number filter",
            "schema": {
              "type": "string",
              "example": "00001/PI/03/25"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Purchase invoices retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseInvoiceListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error get purchase invoice data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "BERU05"
                    },
                    "message": {
                      "type": "string",
                      "example": "error get purchase invoice data"
                    },
                    "traceId": {
                      "type": "string",
                      "example": "123e4567-e89b-12d3-a456-426614174000"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Purchase Invoices"
        ],
        "summary": "Create Purchase Invoice",
        "description": "Create a new purchase invoice",
        "requestBody": {
          "description": "Purchase invoice details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePurchaseInvoiceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Purchase invoice created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseInvoiceDetailResponse"
                }
              }
            }
          },
          "404": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "traceId": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Unprocessable Entity 1": {
                    "summary": "Invalid transaction data purchase order",
                    "value": {
                      "status": "ACC09",
                      "message": "transaction data purchase order not found",
                      "traceId": "123e4567-e89b-12d3-a456-426614174000"
                    }
                  },
                  "Unprocessable Entity 2": {
                    "summary": "Invalid master data currency",
                    "value": {
                      "status": "ACC09",
                      "message": "master data currency not found",
                      "traceId": "123e4567-e89b-12d3-a456-426614174000"
                    }
                  },
                  "Unprocessable Entity 3": {
                    "summary": "Invalid parameter data product inventory",
                    "value": {
                      "status": "ACC09",
                      "message": "parameter data product inventory not found",
                      "traceId": "123e4567-e89b-12d3-a456-426614174000"
                    }
                  },
                  "Unprocessable Entity 4": {
                    "summary": "Invalid parameter data other purchasing expenses",
                    "value": {
                      "status": "ACC09",
                      "message": "parameter data other purchasing expenses not found",
                      "traceId": "123e4567-e89b-12d3-a456-426614174000"
                    }
                  },
                  "Unprocessable Entity 5": {
                    "summary": "Invalid parameter data account payable",
                    "value": {
                      "status": "ACC09",
                      "message": "parameter data account payable not found",
                      "traceId": "123e4567-e89b-12d3-a456-426614174000"
                    }
                  },
                  "Unprocessable Entity 6": {
                    "summary": "Invalid parameter data consumption expense",
                    "value": {
                      "status": "ACC09",
                      "message": "parameter data consumption expense not found",
                      "traceId": "123e4567-e89b-12d3-a456-426614174000"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "traceId": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Invalid Request 1": {
                    "summary": "Multiple tax codes are not allowed",
                    "value": {
                      "status": "ACC03",
                      "message": "multiple tax codes are not allowed",
                      "traceId": "123e4567-e89b-12d3-a456-426614174000"
                    }
                  },
                  "Invalid Request 2": {
                    "summary": "Invalid expired date",
                    "value": {
                      "status": "ACC03",
                      "message": "expired date should be later or equal to document date",
                      "traceId": "123e4567-e89b-12d3-a456-426614174000"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/purchase-invoices/{document_number}": {
      "get": {
        "tags": [
          "Purchase Invoices"
        ],
        "summary": "Get Purchase Invoice by ID",
        "description": "Retrieve a specific purchase invoice by document number",
        "parameters": [
          {
            "name": "document_number",
            "in": "path",
            "required": true,
            "description": "Document number (URL encoded)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Purchase invoice retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseInvoiceDetailResponse"
                }
              }
            }
          },
          "404": {
            "description": "Purchase invoice data not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "BERU04"
                    },
                    "message": {
                      "type": "string",
                      "example": "purchase invoice data not found"
                    },
                    "traceId": {
                      "type": "string",
                      "example": "123e4567-e89b-12d3-a456-426614174000"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Purchase Invoices"
        ],
        "summary": "Update Purchase Invoice",
        "description": "Update a purchase invoice",
        "parameters": [
          {
            "name": "document_number",
            "in": "path",
            "required": true,
            "description": "Document number (URL encoded)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Purchase invoice details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePurchaseInvoiceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Purchase invoice updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseInvoiceDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Transaction data purchase invoice data not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "BERU11"
                    },
                    "message": {
                      "type": "string",
                      "example": "transaction data purchase invoice data not found"
                    },
                    "traceId": {
                      "type": "string",
                      "example": "123e4567-e89b-12d3-a456-426614174000"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Document date should be same month and year with current month and year",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "BERU03"
                    },
                    "message": {
                      "type": "string",
                      "example": "document date should be same month and year with current month and year"
                    },
                    "traceId": {
                      "type": "string",
                      "example": "123e4567-e89b-12d3-a456-426614174000"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/sales-invoices": {
      "get": {
        "tags": [
          "Sales Invoices"
        ],
        "summary": "List Sales Invoices",
        "description": "Retrieve a list of sales invoices with filtering options",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "document_status",
            "in": "query",
            "description": "Document status filter",
            "schema": {
              "type": "string",
              "enum": [
                "D",
                "F",
                "M",
                "C"
              ]
            }
          },
          {
            "name": "month",
            "in": "query",
            "description": "Month filter",
            "schema": {
              "type": "string",
              "example": "09"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "Year filter",
            "schema": {
              "type": "string",
              "example": "2025"
            }
          },
          {
            "name": "tax_code",
            "in": "query",
            "description": "Tax code filter",
            "schema": {
              "type": "string",
              "example": "005"
            }
          },
          {
            "name": "customer_name",
            "in": "query",
            "description": "Customer name filter",
            "schema": {
              "type": "string",
              "example": "PT. ABC"
            }
          },
          {
            "name": "document_number",
            "in": "query",
            "description": "Document number filter",
            "schema": {
              "type": "string",
              "example": "00001/FPB/03/25"
            }
          },
          {
            "name": "customer_code",
            "in": "query",
            "description": "Customer code filter",
            "schema": {
              "type": "string",
              "example": "0124"
            }
          },
          {
            "name": "process_status",
            "in": "query",
            "description": "Process status filter",
            "schema": {
              "type": "string",
              "example": "OP"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sales invoices retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesInvoiceListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error get sales invoice data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "BERU05"
                    },
                    "message": {
                      "type": "string",
                      "example": "error get sales invoice data"
                    },
                    "traceId": {
                      "type": "string",
                      "example": "123e4567-e89b-12d3-a456-426614174000"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Sales Invoices"
        ],
        "summary": "Create Sales Invoice",
        "description": "Create a new sales invoice",
        "requestBody": {
          "description": "Sales invoice details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSalesInvoiceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sales invoice created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesInvoiceDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "traceId": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Invalid Request 1": {
                    "summary": "Invalid tax item",
                    "value": {
                      "status": "ACC03",
                      "message": "tax item not valid",
                      "traceId": "123e4567-e89b-12d3-a456-426614174000"
                    }
                  },
                  "Invalid Request 2": {
                    "summary": "Invalid consumption item",
                    "value": {
                      "status": "ACC03",
                      "message": "consumption items cannot be used in sales invoice",
                      "traceId": "123e4567-e89b-12d3-a456-426614174000"
                    }
                  },
                  "Invalid Request 3": {
                    "summary": "Invalid item",
                    "value": {
                      "status": "ACC03",
                      "message": "item not valid",
                      "traceId": "123e4567-e89b-12d3-a456-426614174000"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/sales-invoices/{document_number}": {
      "get": {
        "tags": [
          "Sales Invoices"
        ],
        "summary": "Get Sales Invoice by ID",
        "description": "Retrieve a specific sales invoice by document number",
        "parameters": [
          {
            "name": "document_number",
            "in": "path",
            "required": true,
            "description": "Document number (URL encoded)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sales invoice retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesInvoiceDetailResponse"
                }
              }
            }
          },
          "404": {
            "description": "Sales invoice data not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "BERU04"
                    },
                    "message": {
                      "type": "string",
                      "example": "error sales invoice not found"
                    },
                    "traceId": {
                      "type": "string",
                      "example": "123e4567-e89b-12d3-a456-426614174000"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sales Invoices"
        ],
        "summary": "Update Sales Invoice",
        "description": "Update a sales invoice",
        "parameters": [
          {
            "name": "document_number",
            "in": "path",
            "required": true,
            "description": "Document number (URL encoded)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Sales invoice details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSalesInvoiceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sales invoice updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesInvoiceDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Transaction data sales order not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "BERU11"
                    },
                    "message": {
                      "type": "string",
                      "example": "transaction data sales order not found"
                    },
                    "traceId": {
                      "type": "string",
                      "example": "123e4567-e89b-12d3-a456-426614174000"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Edit not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "BERU03"
                    },
                    "message": {
                      "type": "string",
                      "example": "edit not allowed"
                    },
                    "traceId": {
                      "type": "string",
                      "example": "123e4567-e89b-12d3-a456-426614174000"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/sales-invoices/customers": {
      "get": {
        "tags": [
          "Sales Invoices"
        ],
        "summary": "Get Sales Invoice Customers",
        "description": "Retrieve a list of customers for sales invoices",
        "responses": {
          "200": {
            "description": "Sales invoice customers retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesInvoiceCustomersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sales-orders": {
      "get": {
        "tags": [
          "Sales Invoices"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit",
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "name": "invoice_indicator",
            "in": "query",
            "description": "Invoice indicator filter",
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "summary": "Get Sales Order",
        "description": "Retrieve a list of sales orders",
        "responses": {
          "200": {
            "description": "Sales order retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesOrderListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sales-orders/{document_number}": {
      "get": {
        "tags": [
          "Sales Invoices"
        ],
        "summary": "Get Sales Order by ID",
        "description": "Retrieve a specific sales order by document number",
        "parameters": [
          {
            "name": "document_number",
            "in": "path",
            "required": true,
            "description": "Document number (URL encoded)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sales order retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesOrderDetailResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/dashboard/accountings": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get Dashboard Accounting",
        "description": "Retrieve data of dashboard accounting",
        "parameters": [
          {
            "name": "year",
            "in": "query",
            "description": "Year",
            "schema": {
              "type": "number",
              "example": 2025
            }
          },
          {
            "name": "month",
            "in": "query",
            "description": "Month",
            "schema": {
              "type": "number",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard accounting retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "00"
                    },
                    "message": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "net_profit_margin": {
                          "type": "number",
                          "example": 79.37
                        },
                        "percentage_not_profit_margin": {
                          "type": "number",
                          "example": 0.01
                        },
                        "current_ratio": {
                          "type": "number",
                          "example": 675.18
                        },
                        "percentage_current_ratio": {
                          "type": "number",
                          "example": 0.05
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/dashboard/monthly-cashflow": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get Monthly Cashflow",
        "description": "Retrieve data of monthly cashflow",
        "parameters": [
          {
            "name": "year",
            "in": "query",
            "description": "Year",
            "schema": {
              "type": "number",
              "example": 2025
            }
          },
          {
            "name": "month",
            "in": "query",
            "description": "Month",
            "schema": {
              "type": "number",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Monthly cashflow retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "00"
                    },
                    "message": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "total_income": {
                          "type": "number",
                          "example": 112600
                        },
                        "income_growth": {
                          "type": "number",
                          "example": 11160
                        },
                        "total_expense": {
                          "type": "number",
                          "example": 2000
                        },
                        "expense_growth": {
                          "type": "number",
                          "example": -66.67
                        },
                        "total_balance": {
                          "type": "number",
                          "example": 15110600
                        },
                        "balance_growth": {
                          "type": "number",
                          "example": 5004.93
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "VoucherListResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "00"
          },
          "message": {
            "type": "string",
            "example": "success"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Voucher"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "VoucherResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "00"
          },
          "message": {
            "type": "string",
            "example": "success"
          },
          "data": {
            "$ref": "#/components/schemas/VoucherDetail"
          }
        }
      },
      "VoucherDetailResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "00"
          },
          "message": {
            "type": "string",
            "example": "success"
          },
          "data": {
            "$ref": "#/components/schemas/VoucherDetail"
          }
        }
      },
      "CategoriesResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "00"
          },
          "message": {
            "type": "string",
            "example": "success"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "JournalListResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "00"
          },
          "message": {
            "type": "string",
            "example": "success"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JournalListItem"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "JournalDetailResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "00"
          },
          "message": {
            "type": "string",
            "example": "success"
          },
          "data": {
            "$ref": "#/components/schemas/JournalDetail"
          }
        }
      },
      "Voucher": {
        "type": "object",
        "properties": {
          "document_number": {
            "type": "string",
            "example": "00001/AKB/03/24"
          },
          "document_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-10T00:00:00Z"
          },
          "document_status": {
            "type": "string",
            "enum": [
              "Draft",
              "Final",
              "Canceled"
            ],
            "example": "Draft"
          },
          "document_type": {
            "type": "string",
            "enum": [
              "Transfer Dana",
              "Kirim Dana",
              "Terima Dana"
            ],
            "example": "Transfer Dana"
          },
          "bank_account_code_from": {
            "type": "string",
            "example": "0001"
          },
          "bank_account_code_to": {
            "type": "string",
            "example": "0002"
          },
          "bank_account_name_from": {
            "type": "string",
            "example": "bank test from"
          },
          "bank_account_name_to": {
            "type": "string",
            "example": "bank test to"
          },
          "total_amount": {
            "type": "number",
            "example": 5000
          },
          "remark": {
            "type": "string",
            "example": "TEST"
          },
          "total_debit": {
            "type": "number",
            "example": 6000
          },
          "total_credit": {
            "type": "number",
            "example": 0
          },
          "menu_code": {
            "type": "string",
            "example": "BPB"
          },
          "menu_desc": {
            "type": "string",
            "example": "Pembayaran Pembelian"
          }
        }
      },
      "VoucherDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Voucher"
          },
          {
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VoucherItem"
                }
              }
            }
          }
        ]
      },
      "VoucherItem": {
        "type": "object",
        "properties": {
          "document_number": {
            "type": "string",
            "example": "00001/AKB/03/24"
          },
          "detail_number": {
            "type": "string",
            "example": "00001"
          },
          "account_number": {
            "type": "string",
            "example": "1.01.01.01.03"
          },
          "account_description": {
            "type": "string",
            "example": "Kas (Account Test)"
          },
          "debit": {
            "type": "number",
            "example": 6000
          },
          "credit": {
            "type": "number",
            "example": 0
          }
        }
      },
      "CreateVoucherRequest": {
        "type": "object",
        "required": [
          "document_date",
          "document_status",
          "document_type",
          "bank_account_code_from",
          "bank_account_code_to",
          "total_amount",
          "items"
        ],
        "properties": {
          "document_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-10-11T00:00:00Z"
          },
          "document_status": {
            "type": "string",
            "enum": [
              "D",
              "F",
              "C"
            ],
            "example": "D"
          },
          "document_type": {
            "type": "string",
            "enum": [
              "T",
              "S",
              "R"
            ],
            "example": "R"
          },
          "bank_account_code_from": {
            "type": "string",
            "example": "001"
          },
          "bank_account_code_to": {
            "type": "string",
            "example": "3454656"
          },
          "remark": {
            "type": "string",
            "example": "la ta ta ta"
          },
          "total_amount": {
            "type": "number",
            "example": 12000
          },
          "is_use_category": {
            "type": "boolean",
            "example": false
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoucherItemRequest"
            }
          }
        }
      },
      "UpdateVoucherRequest": {
        "type": "object",
        "properties": {
          "document_status": {
            "type": "string",
            "enum": [
              "D",
              "F",
              "C"
            ],
            "example": "D"
          },
          "document_type": {
            "type": "string",
            "enum": [
              "T",
              "S",
              "R"
            ],
            "example": "R"
          },
          "bank_account_code_from": {
            "type": "string",
            "example": "test-coa3"
          },
          "bank_account_code_to": {
            "type": "string",
            "example": "test-coa4"
          },
          "remark": {
            "type": "string",
            "example": "la ta ta ta"
          },
          "total_amount": {
            "type": "number",
            "example": 12000
          },
          "member_code": {
            "type": "string",
            "example": "0124"
          },
          "category_code": {
            "type": "string",
            "example": "02"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoucherItemRequest"
            }
          }
        }
      },
      "VoucherItemRequest": {
        "type": "object",
        "required": [
          "account_number",
          "debit",
          "credit"
        ],
        "properties": {
          "account_number": {
            "type": "string",
            "example": "1.01.01.02"
          },
          "debit": {
            "type": "number",
            "example": 0
          },
          "credit": {
            "type": "number",
            "example": 12000
          }
        }
      },
      "JournalListItem": {
        "type": "object",
        "properties": {
          "document_number": {
            "type": "string",
            "example": "00001/JTR/03/25"
          },
          "document_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-03-19T00:00:00Z"
          },
          "description": {
            "type": "string",
            "example": "Description"
          },
          "account": {
            "type": "string",
            "example": "1.01.01.01.01 - Kas Kecil (IDR)"
          },
          "menu": {
            "type": "string",
            "example": "Jurnal Transaksi"
          },
          "debit": {
            "type": "number",
            "example": 100000
          },
          "credit": {
            "type": "number",
            "example": 0
          },
          "total": {
            "type": "number",
            "example": 0
          },
          "remark": {
            "type": "string",
            "example": ""
          }
        }
      },
      "JournalDetail": {
        "type": "object",
        "properties": {
          "document_number": {
            "type": "string",
            "example": "00001/JTR/03/25"
          },
          "document_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-03-19T00:00:00Z"
          },
          "document_number_origin": {
            "type": "string",
            "example": "00001/JTR/03/25"
          },
          "description": {
            "type": "string",
            "example": "Description"
          },
          "remark": {
            "type": "string",
            "example": ""
          },
          "debit": {
            "type": "number",
            "example": 100000
          },
          "credit": {
            "type": "number",
            "example": 100000
          },
          "menu_code": {
            "type": "string",
            "example": "JTR"
          },
          "menu": {
            "type": "string",
            "example": "Jurnal Transaksi"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JournalItem"
            }
          }
        }
      },
      "JournalItem": {
        "type": "object",
        "properties": {
          "document_number": {
            "type": "string",
            "example": "00001/JTR/03/25"
          },
          "detail_number": {
            "type": "string",
            "example": "00001"
          },
          "account_number": {
            "type": "string",
            "example": "1.01.01.01.01"
          },
          "account_description": {
            "type": "string",
            "example": "Kas Kecil (IDR)"
          },
          "debit": {
            "type": "number",
            "example": 100000
          },
          "credit": {
            "type": "number",
            "example": 0
          }
        }
      },
      "CreateJournalRequest": {
        "type": "object",
        "required": [
          "document_date",
          "description",
          "items"
        ],
        "properties": {
          "document_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-12-19T00:00:00Z"
          },
          "description": {
            "type": "string",
            "example": "Description"
          },
          "remark": {
            "type": "string",
            "example": ""
          },
          "other_amount": {
            "type": "number",
            "example": 2500
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JournalItemRequest"
            }
          }
        }
      },
      "JournalItemRequest": {
        "type": "object",
        "required": [
          "account_number",
          "debit",
          "credit"
        ],
        "properties": {
          "account_number": {
            "type": "string",
            "example": "1.01.01.01.01"
          },
          "debit": {
            "type": "number",
            "example": 2500
          },
          "credit": {
            "type": "number",
            "example": 0
          }
        }
      },
      "PurchaseInvoiceListResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "00"
          },
          "message": {
            "type": "string",
            "example": "Success"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "document_number": {
                  "type": "string",
                  "example": "00001/FPB/03/25"
                },
                "purchase_order_document_number": {
                  "type": "string",
                  "example": "00001/PO/03/25"
                },
                "document_date": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2025-03-19T00:00:00Z"
                },
                "vendor_code": {
                  "type": "string",
                  "example": "0124"
                },
                "vendor_name": {
                  "type": "string",
                  "example": "PT. ABC"
                },
                "currency_code": {
                  "type": "string",
                  "example": "IDR"
                },
                "currency_name": {
                  "type": "string",
                  "example": "IDR Jakartan"
                },
                "document_status": {
                  "type": "string",
                  "enum": [
                    "Draft",
                    "Final",
                    "Manual Fullfilment",
                    "Cancelled"
                  ],
                  "example": "Draft"
                },
                "process_status": {
                  "type": "string",
                  "example": "Belum Lunas"
                },
                "due_date": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2025-03-19T00:00:00Z"
                },
                "description": {
                  "type": "string",
                  "example": "Description"
                },
                "sub_total_amount": {
                  "type": "number",
                  "example": 5600
                },
                "total_tax_amount": {
                  "type": "number",
                  "example": 630
                },
                "other_amount": {
                  "type": "number",
                  "example": 100
                },
                "discount_amount": {
                  "type": "number",
                  "example": 2000
                },
                "rounding_amount": {
                  "type": "number",
                  "example": -10
                },
                "total_amount": {
                  "type": "number",
                  "example": 4320
                },
                "total_payment": {
                  "type": "number",
                  "example": 0
                },
                "outstanding_amount": {
                  "type": "number",
                  "example": 0
                },
                "tax_included_indicator": {
                  "type": "boolean",
                  "example": false
                },
                "aging_days": {
                  "type": "integer",
                  "example": 9
                },
                "vendor_invoice_number": {
                  "type": "string",
                  "example": "test123456"
                },
                "vendor_address": {
                  "type": "string",
                  "example": "Jl. Raya No. 1"
                },
                "auto_create_payment": {
                  "type": "boolean",
                  "example": false
                },
                "bank_account_code": {
                  "type": "string",
                  "example": "001"
                },
                "bank_account_name": {
                  "type": "string",
                  "example": "Kas Kecil"
                },
                "created_by": {
                  "type": "string",
                  "example": "John Doe"
                },
                "cancel_reason": {
                  "type": "string",
                  "example": "Cancel reason"
                }
              }
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "PurchaseInvoiceDetailResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "00"
          },
          "message": {
            "type": "string",
            "example": "Success"
          },
          "data": {
            "$ref": "#/components/schemas/PurchaseInvoiceDetail"
          }
        }
      },
      "PurchaseInvoiceDetail": {
        "type": "object",
        "properties": {
          "document_number": {
            "type": "string",
            "example": "00001/FPB/03/25"
          },
          "purchase_order_document_number": {
            "type": "string",
            "example": "00001/PO/03/25"
          },
          "document_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-03-19T00:00:00Z"
          },
          "vendor_code": {
            "type": "string",
            "example": "0124"
          },
          "vendor_name": {
            "type": "string",
            "example": "PT. ABC"
          },
          "currency_code": {
            "type": "string",
            "example": "IDR"
          },
          "currency_name": {
            "type": "string",
            "example": "IDR Jakartan"
          },
          "document_status": {
            "type": "string",
            "enum": [
              "Draft",
              "Final",
              "Manual Fullfilment",
              "Cancelled"
            ],
            "example": "Draft"
          },
          "process_status": {
            "type": "string",
            "example": "Belum Lunas"
          },
          "due_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-03-19T00:00:00Z"
          },
          "description": {
            "type": "string",
            "example": "Description"
          },
          "sub_total_amount": {
            "type": "number",
            "example": 5600
          },
          "total_tax_amount": {
            "type": "number",
            "example": 630
          },
          "other_amount": {
            "type": "number",
            "example": 100
          },
          "discount_amount": {
            "type": "number",
            "example": 2000
          },
          "rounding_amount": {
            "type": "number",
            "example": -10
          },
          "total_amount": {
            "type": "number",
            "example": 4320
          },
          "total_payment": {
            "type": "number",
            "example": 0
          },
          "outstanding_amount": {
            "type": "number",
            "example": 0
          },
          "tax_included_indicator": {
            "type": "boolean",
            "example": false
          },
          "aging_days": {
            "type": "integer",
            "example": 9
          },
          "vendor_invoice_number": {
            "type": "string",
            "example": "test123456"
          },
          "vendor_address": {
            "type": "string",
            "example": "Jl. Raya No. 1"
          },
          "auto_create_payment": {
            "type": "boolean",
            "example": false
          },
          "bank_account_code": {
            "type": "string",
            "example": "001"
          },
          "bank_account_name": {
            "type": "string",
            "example": "Kas Kecil"
          },
          "created_by": {
            "type": "string",
            "example": "John Doe"
          },
          "cancel_reason": {
            "type": "string",
            "example": "Cancel reason"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseInvoiceItem"
            }
          }
        }
      },
      "CreatePurchaseInvoiceRequest": {
        "type": "object",
        "required": [
          "document_status",
          "document_date",
          "process_status",
          "vendor_code",
          "items"
        ],
        "properties": {
          "document_status": {
            "type": "string",
            "enum": [
              "D",
              "F",
              "M",
              "C"
            ],
            "example": "F"
          },
          "document_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-03-19T00:00:00Z"
          },
          "process_status": {
            "type": "string",
            "example": "UP"
          },
          "vendor_code": {
            "type": "string",
            "example": "0124"
          },
          "auto_create_payment": {
            "description": "Set to `true` if you want to create payment automatically",
            "type": "boolean",
            "example": false
          },
          "tax_included_indicator": {
            "type": "boolean",
            "example": false
          },
          "due_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-03-19T00:00:00Z"
          },
          "cancel_indicator": {
            "type": "string",
            "enum": [
              "Y",
              "N"
            ],
            "example": "N"
          },
          "discount_amount": {
            "type": "number",
            "example": 2000
          },
          "rounding_amount": {
            "type": "number",
            "example": -10
          },
          "other_amount": {
            "type": "number",
            "example": 100
          },
          "purchase_order_document_number": {
            "type": "string",
            "example": "00001/PO/03/25"
          },
          "currency_code": {
            "type": "string",
            "example": "IDR"
          },
          "vendor_invoice_number": {
            "type": "string",
            "example": ""
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseInvoiceItemRequest"
            }
          }
        }
      },
      "UpdatePurchaseInvoiceRequest": {
        "type": "object",
        "required": [
          "document_number",
          "document_date",
          "vendor_code",
          "document_status",
          "process_status",
          "bank_account_code",
          "items"
        ],
        "properties": {
          "tax_included_indicator": {
            "type": "boolean",
            "example": false
          },
          "document_status": {
            "type": "string",
            "enum": [
              "D",
              "F",
              "M",
              "C"
            ],
            "example": "D"
          },
          "vendor_code": {
            "type": "string",
            "example": "00001"
          },
          "due_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-03-19T00:00:00Z"
          },
          "document_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-03-19T00:00:00Z"
          },
          "discount_amount": {
            "type": "number",
            "example": 0
          },
          "rounding_amount": {
            "type": "number",
            "example": 0
          },
          "other_amount": {
            "type": "number",
            "example": 0
          },
          "process_status": {
            "type": "string",
            "example": "UP"
          },
          "purchase_order_document_number": {
            "type": "string",
            "example": ""
          },
          "currency_code": {
            "type": "string",
            "example": "IDR"
          },
          "vendor_invoice_number": {
            "type": "string",
            "example": "test123456"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseInvoiceItemRequest"
            }
          }
        }
      },
      "PurchaseInvoiceItemRequest": {
        "type": "object",
        "properties": {
          "item_code": {
            "type": "string",
            "example": "001"
          },
          "item_name": {
            "type": "string",
            "example": "Sample Item"
          },
          "unit_of_measurement_code": {
            "type": "string",
            "example": "Pcs"
          },
          "quantity": {
            "type": "number",
            "example": 1
          },
          "unit_price": {
            "type": "number",
            "example": 15000000
          },
          "discount_amount": {
            "type": "number",
            "example": 1000000
          },
          "tax_code": {
            "type": "string",
            "example": "004"
          }
        }
      },
      "PurchaseInvoiceItem": {
        "type": "object",
        "properties": {
          "document_number": {
            "type": "string",
            "example": "00001/FPB/03/25"
          },
          "detail_number": {
            "type": "string",
            "example": "00001"
          },
          "item_code": {
            "type": "string",
            "example": "PNB01-000002"
          },
          "item_name": {
            "type": "string",
            "example": "Pembelian"
          },
          "uom_code": {
            "type": "string",
            "example": "001"
          },
          "uom_name": {
            "type": "string",
            "example": "Hour"
          },
          "quantity": {
            "type": "number",
            "example": 1
          },
          "unit_price": {
            "type": "number",
            "example": 15000000
          },
          "discount_amount": {
            "type": "number",
            "example": 100000
          },
          "sub_total_amount": {
            "type": "number",
            "example": 14900000
          },
          "tax_code": {
            "type": "string",
            "example": "004"
          },
          "tax_name": {
            "type": "string",
            "example": "PPh 21 rate 6"
          },
          "tax_rate": {
            "type": "number",
            "example": -6
          },
          "total_tax_amount": {
            "type": "number",
            "example": -894000
          },
          "total_amount": {
            "type": "number",
            "example": 14006000
          }
        }
      },
      "SalesInvoiceListResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "00"
          },
          "message": {
            "type": "string",
            "example": "Success"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SalesInvoiceListItem"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "SalesInvoiceListItem": {
        "type": "object",
        "properties": {
          "document_number": {
            "type": "string",
            "example": "00001/FPB/03/25"
          },
          "document_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-03-19T00:00:00Z"
          },
          "customer_code": {
            "type": "string",
            "example": "0124"
          },
          "customer_name": {
            "type": "string",
            "example": "PT. ABC"
          },
          "document_status": {
            "type": "string",
            "enum": [
              "Draft",
              "Final",
              "Canceled"
            ],
            "example": "Draft"
          },
          "process_status": {
            "type": "string",
            "example": "Belum Lunas"
          },
          "total_amount": {
            "type": "number",
            "example": 17460000
          },
          "due_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-03-19T00:00:00Z"
          },
          "total_payment": {
            "type": "number",
            "example": 17460000
          },
          "aging_days": {
            "type": "integer",
            "example": 9
          },
          "total_outstanding": {
            "type": "number",
            "example": 17460000
          },
          "created_by": {
            "type": "string",
            "example": "John Doe"
          }
        }
      },
      "CreateSalesInvoiceRequest": {
        "type": "object",
        "required": [
          "customer_name",
          "document_date",
          "items"
        ],
        "properties": {
          "customer_name": {
            "type": "string",
            "example": "PT. ABC"
          },
          "document_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-10-11T00:00:00Z"
          },
          "discount_amount": {
            "type": "number",
            "example": 0
          },
          "rounding_amount": {
            "type": "number",
            "example": 0
          },
          "other_amount": {
            "type": "number",
            "example": 0
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SalesInvoiceItemRequest"
            }
          }
        }
      },
      "UpdateSalesInvoiceRequest": {
        "type": "object",
        "properties": {
          "document_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-10-11T00:00:00Z"
          },
          "sales_order_document_number": {
            "type": "string",
            "example": "00001/SO/03/25"
          },
          "customer_code": {
            "type": "string",
            "example": "0124"
          },
          "currency_code": {
            "type": "string",
            "example": "IDR"
          },
          "document_status": {
            "type": "string",
            "enum": [
              "D",
              "F",
              "M",
              "C"
            ],
            "example": "D"
          },
          "sales_person_code": {
            "type": "string",
            "example": "001"
          },
          "due_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-10-11T00:00:00Z"
          },
          "description": {
            "type": "string",
            "example": "Description"
          },
          "tax_included_indicator": {
            "type": "boolean",
            "example": false
          },
          "other_amount": {
            "type": "number",
            "example": 0
          },
          "discount_amount": {
            "type": "number",
            "example": 0
          },
          "rounding_amount": {
            "type": "number",
            "example": 0
          },
          "document_number": {
            "type": "string",
            "example": "00001/FPB/03/25"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SalesInvoiceItemRequest"
            }
          }
        }
      },
      "SalesInvoiceItemRequest": {
        "type": "object",
        "properties": {
          "item_code": {
            "type": "string",
            "example": "001"
          },
          "quantity": {
            "type": "number",
            "example": 1
          },
          "unit_of_measurement_code": {
            "type": "string",
            "example": "Box"
          },
          "unit_price": {
            "type": "number",
            "example": 1000000
          },
          "discount_amount": {
            "type": "number",
            "example": 100000
          },
          "tax_code": {
            "type": "string",
            "example": "004"
          }
        }
      },
      "SalesInvoiceDetailResponse": {
        "type": "object",
        "properties": {
          "document_number": {
            "type": "string",
            "example": "00001/FPB/03/25"
          },
          "document_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-03-19T00:00:00Z"
          },
          "sales_order_document_number": {
            "type": "string",
            "example": "00001/SO/03/25"
          },
          "customer_code": {
            "type": "string",
            "example": "0124"
          },
          "customer_name": {
            "type": "string",
            "example": "PT. ABC"
          },
          "customer_address": {
            "type": "string",
            "example": "Jl. Raya No. 123"
          },
          "document_status": {
            "type": "string",
            "enum": [
              "Draft",
              "Final",
              "Canceled"
            ],
            "example": "Final"
          },
          "process_status": {
            "type": "string",
            "example": "Belum Lunas"
          },
          "cancel_reason": {
            "type": "string",
            "example": "Cancel reason"
          },
          "currency_code": {
            "type": "string",
            "example": "IDR"
          },
          "currency_name": {
            "type": "string",
            "example": "Rupiah Indonesia"
          },
          "sales_person_code": {
            "type": "string",
            "example": "0124"
          },
          "sales_person_name": {
            "type": "string",
            "example": "John Doe"
          },
          "due_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-03-19T00:00:00Z"
          },
          "description": {
            "type": "string",
            "example": "Description"
          },
          "tax_included_indicator": {
            "type": "boolean",
            "example": false
          },
          "sub_total_amount": {
            "type": "number",
            "example": 1000000
          },
          "total_tax_amount": {
            "type": "number",
            "example": 0
          },
          "other_amount": {
            "type": "number",
            "example": 0
          },
          "discount_amount": {
            "type": "number",
            "example": 0
          },
          "rounding_amount": {
            "type": "number",
            "example": 0
          },
          "total_amount": {
            "type": "number",
            "example": 1000000
          },
          "outstanding_amount": {
            "type": "number",
            "example": 1000000
          },
          "auto_create_payment": {
            "type": "boolean",
            "example": false
          },
          "bank_account_code": {
            "type": "string",
            "example": "001"
          },
          "bank_account_name": {
            "type": "string",
            "example": "Kas Kecil"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SalesInvoiceItem"
            }
          }
        }
      },
      "SalesInvoiceItem": {
        "type": "object",
        "properties": {
          "document_number": {
            "type": "string",
            "example": "00001/FPB/03/25"
          },
          "detail_number": {
            "type": "string",
            "example": "0001"
          },
          "item_code": {
            "type": "string",
            "example": "PNJ01-000001"
          },
          "item_name": {
            "type": "string",
            "example": "Penjualan"
          },
          "quantity": {
            "type": "number",
            "example": 1
          },
          "unit_of_measurement_code": {
            "type": "string",
            "example": "Pcs"
          },
          "unit_of_measurement_name": {
            "type": "string",
            "example": "Pieces"
          },
          "unit_price": {
            "type": "number",
            "example": 1000
          },
          "discount_amount": {
            "type": "number",
            "example": 0
          },
          "sub_total_amount": {
            "type": "number",
            "example": 1000
          },
          "tax_code": {
            "type": "string",
            "example": ""
          },
          "tax_name": {
            "type": "string",
            "example": ""
          },
          "tax_rate": {
            "type": "number",
            "example": 0
          },
          "total_tax": {
            "type": "number",
            "example": 0
          },
          "total_amount": {
            "type": "number",
            "example": 1000
          }
        }
      },
      "SalesInvoiceCustomersResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "00"
          },
          "message": {
            "type": "string",
            "example": "Success"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "example": [
              {
                "code": "00001",
                "name": "PT. ABC"
              },
              {
                "code": "00002",
                "name": "PT. DEF"
              }
            ]
          }
        }
      },
      "SalesOrderListResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "00"
          },
          "message": {
            "type": "string",
            "example": "Success"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "document_number": {
                  "type": "string",
                  "example": "00001/SO/03/25"
                },
                "document_date": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2025-03-19T00:00:00Z"
                },
                "customer_code": {
                  "type": "string",
                  "example": "00001"
                },
                "customer_name": {
                  "type": "string",
                  "example": "PT. ABC"
                },
                "document_status": {
                  "type": "string",
                  "enum": [
                    "Draft",
                    "Final",
                    "Canceled"
                  ],
                  "example": "Draft"
                },
                "process_status": {
                  "type": "string",
                  "example": "UP"
                }
              }
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "SalesOrderDetailResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "00"
          },
          "message": {
            "type": "string",
            "example": "Success"
          },
          "data": {
            "type": "object",
            "properties": {
              "document_number": {
                "type": "string",
                "example": "00001/SO/03/25"
              },
              "document_date": {
                "type": "string",
                "format": "date-time",
                "example": "2025-03-19T00:00:00Z"
              },
              "customer_code": {
                "type": "string",
                "example": "00001"
              },
              "customer_name": {
                "type": "string",
                "example": "PT. ABC"
              },
              "sales_person_code": {
                "type": "string",
                "example": "00001"
              },
              "sales_person_name": {
                "type": "string",
                "example": "John Doe"
              },
              "payment_term_code": {
                "type": "string",
                "example": "TOP30D"
              },
              "payment_term_name": {
                "type": "string",
                "example": "30-day"
              },
              "document_status": {
                "type": "string",
                "enum": [
                  "Draft",
                  "Final",
                  "Canceled"
                ],
                "example": "Draft"
              },
              "process_status": {
                "type": "string",
                "example": "Belum Lunas"
              },
              "description": {
                "type": "string",
                "example": "Sample description"
              },
              "tax_included_indicator": {
                "type": "string",
                "example": "N"
              },
              "sub_total_amount": {
                "type": "number",
                "example": 1000000
              },
              "total_tax_amount": {
                "type": "number",
                "example": 0
              },
              "other_amount": {
                "type": "number",
                "example": 0
              },
              "discount_amount": {
                "type": "number",
                "example": 0
              },
              "rounding_amount": {
                "type": "number",
                "example": 0
              },
              "total_amount": {
                "type": "number",
                "example": 1000000
              },
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SalesOrderItem"
                }
              }
            }
          }
        }
      },
      "SalesOrderItem": {
        "type": "object",
        "properties": {
          "document_number": {
            "type": "string",
            "example": "00001/SO/03/25"
          },
          "detail_number": {
            "type": "string",
            "example": "0001"
          },
          "item_code": {
            "type": "string",
            "example": "00001"
          },
          "item_name": {
            "type": "string",
            "example": "Besi ringan"
          },
          "unit_of_measurement_code": {
            "type": "string",
            "example": "Pcs"
          },
          "unit_of_measurement_name": {
            "type": "string",
            "example": "Pieces"
          },
          "unit_price": {
            "type": "number",
            "example": 1250
          },
          "discount_amount": {
            "type": "number",
            "example": 50
          },
          "sub_total_amount": {
            "type": "number",
            "example": 1200
          },
          "tax_code": {
            "type": "string",
            "example": "004"
          },
          "tax_name": {
            "type": "string",
            "example": "PPN 10%"
          },
          "total_tax": {
            "type": "number",
            "example": 120
          },
          "total_amount": {
            "type": "number",
            "example": 1200
          }
        }
      },
      "Attachment": {
        "type": "object",
        "properties": {
          "file_name": {
            "type": "string",
            "example": "850f8007ccce42b3802c7e6f624f7f3c.jpg"
          },
          "file_size": {
            "type": "number",
            "example": 68498
          },
          "generated_filename": {
            "type": "string",
            "example": "tenant_code/master_item/cb9232e2-301a-47a0-aa13-107cb812f11d.jpg"
          },
          "generated_thumbnail_filename": {
            "type": "string",
            "example": "tenant_code/master_item/thumbnails/cb9232e2-301a-47a0-aa13-107cb812f11d_thumbnail.jpg"
          }
        }
      },
      "Metadata": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "example": 3
          },
          "limit": {
            "type": "integer",
            "example": 10
          },
          "offset": {
            "type": "integer",
            "example": 0
          },
          "current_page": {
            "type": "integer",
            "example": 1
          },
          "total_pages": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "Error": {
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "properties": {
          "status": {
            "type": "string",
            "example": "01"
          },
          "message": {
            "type": "string",
            "example": "Error message"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Generate a JWT signed with the `client_secret` and include the `client_id` as a claim in its payload."
      },
      "signatureKey": {
        "type": "apiKey",
        "in": "header",
        "name": "A-Signature",
        "description": "Generate the signature by creating an `SHA256-HMAC` hash of the payload, using the `client_secret` as the key. Then, `Base64-encode` the resulting hash and place the final value in the ACC-Signature header."
      },
      "dataKey": {
        "type": "apiKey",
        "in": "header",
        "name": "A-Data",
        "description": "Include the `email` and `tenant_id` in the payload as Base64 encoded."
      }
    }
  }
}